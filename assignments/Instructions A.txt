Instructions
These instructions are geared towards students who are completely unfamiliar with python. If you already have some experience, you should be able to breeze through them. If you don't you should be able to as well, except you will learn some new stuff along the way.

X) In the /src/ folder, make a new file named 'geolocator.py' and open it with Geany.

X) On the first line, type
    print("Hello Geo")
and save the file

X) Open a terminal and navigate to the /src/ folder. Once there, type
    python geolocator.py

X) Below the print statement, we are going to define a function to load the images from the hard drive into our program.
Defining a function can be done with:
    def load_images():
        print("Load images")

        return []

Note: in python indentation indicates what code belongs to a function (or in a loop for example). In other words, you don't use brackets or tell the function where is supposed to end. For now the function returns an empty list []. Actually it doesn't even have to have a return statement (equivalent to a void return type in java).

X) Right now we've only defined the function and if we run the program nothing happens. In order to call the load_images function, simply add to the very bottom of the .py file:
    load_images()

X) Now, run the program again:
    python geolocator.py

You should see the "Hello Geo" text and "Loading Images" on the line below. You might as well remove the "Hello Geo" print statement.

We'll get into how to tell your program how to find the actual files later. For now, we'll be doing some basic instruction to familiarize yourself with python.

X) Let's imagine that we already have a list of strings with the filenames and we need to do some operations on them.

Below print("Loading Images") define the list of strings as follows:
    filenames = ["King Arthur.jpg", "Sir Lancelot.jpg", "Ser Galahad.jpg", "Tim.jpg", "Scene 24.jpg"]

Let's iterate through the list to print all the filenames on screen. Below where the list is declared add:
    for name in filenames:
        print(name)

Run the program again.

X) Let's show some more information about the filenames on screen after all have been printed. Below (and outside) the for loop, add:
    print("There are " + len(filenames) + " files known")
    print("The file named %s is the first in the list, and the file named %s is the second." %(filenames[0], filenames[1]))
    print("The file named \'%s\' is the last one and has quotes around it" %filenames[-1])
    
Run this code. You will get an error. It will tell us that we're trying to concatenate a string to an integer on the line indicated. You can fix this by changing len(filenames) to:
    str(len(filenames))

which will cast the integer returned by len(filenames) to a string.
In the final printed line, we used pythons reverse indexing. A lists index starts counting at 0, and continues as you expect. The negative indexing continues counting from the last element being at -1, the second to last at -2 and so on. Instead of -1, we might have used len(filenames)-1.

Try to understand how the %s notation within the printed string operates. After that, you can remove the printed lines we've just added if you want.

X) The eagle-eyed among you might have spotted an error in one of the file names. Galahad has had knighthood title replaced with its Game of Thrones equivalent. Let's fix that error. The 'Ser' has to change into 'Sir'
Rather than just fixing this in the declaration, we're going to do this the hard way, because that will show how to index lists.

Since Galahad is the third entry of filenames, below the filenames declaration type:
    filenames[2] = "Sir Galahad.jpg"

Next, instead of replacing the third entry of filenames, try only replacing the letter with filenames[2][1] = "i"

You'll note that python won't let you do that. Either change it back to how it was before, or just fix Sir Galahads title where it is first declared.

X) Next up is adding and removing items from a list. Add other items by using:
    filenames.append('Sir Robin')
    filenames.append('Minstrels')
    filenames.append('Minstrels')
    filenames.append(3)
    filenames.append(2.5)

Replace print(name) with print("Value: %s type: %s" %(name, type(name))). You will notice that python allows duplicates but also different data types in a single list.

X) Remove Sir Lancelot and Minstrels from the list:
    filenames.remove("Sir Lancelot.jpg")
    filenames.remove("Minstrels")
Notice that only removed one (the first) occurence of Minstrels has been removed.
  
 
